#!/bin/sh

# ==============================================================================
# GLOBALS
# ==============================================================================

# The base project directory
BASE_PATH=`pwd -P`

# The webroot directory name for the dev environment
WEB_DIR='html'

# Full webroot path
WEB_PATH=$BASE_PATH/$WEB_DIR

# Build directory name
BUILD_DIR='build'

# Project build make file
BUILD_MAKEFILE=$BASE_PATH/build-dosomething.make

# ==============================================================================
# Functions
# ==============================================================================

#=== FUNCTION ==================================================================
# NAME: art
# DESCRIPTION: Returns DS ascii art to console
#===============================================================================
function art {
  echo '     _____          ___     ';
  echo '    /  /::\        /  /\    ';
  echo '   /  /:/\:\      /  /:/_   ';
  echo '  /  /:/  \:\    /  /:/ /\  ';
  echo ' /__/:/ \__\:|  /  /:/ /::\ ';
  echo ' \  \:\ /  /:/ /__/:/ /:/\:\';
  echo '  \  \:\  /:/  \  \:\/:/~/:/';
  echo '   \  \:\/:/    \  \::/ /:/ ';
  echo '    \  \::/      \__\/ /:/  ';
  echo '     \__\/         /__/:/   ';
  echo '                   \__\/    ';
}

#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: Returns help text to console
#===============================================================================
function help {
  read -d '' help <<"USAGE"
usage: ds [build [--install]|dbup|dbdump] [--help]

Runs helper scripts for DoSomething environment.

ds build [--install]
  Builds your environment with "drush make".  Also symlinks appropriate
  files into their respective directories.

  --install
    Runs "drush site-install" to actually install the Drupal instance.

ds --help
  Displays this help message.

USAGE
  echo "$help"
}

#=== FUNCTION ==================================================================
# NAME: build
# DESCRIPTION: Builds project from make files
#===============================================================================
function build {

  # Display ascii art
  art

  set -e
  cd $BASE_PATH

  if [ $WEB_PATH ]; then
    echo 'Wiping html directory...'
    rm -rf "$WEB_PATH"
  fi

  # Create the db, if for some reason it's not there yet.
  mysql -uroot -e "CREATE DATABASE IF NOT EXISTS dosomething;"

  # Do the build
  echo 'Running drush make...'
  drush make --prepare-install --no-gitinfofile --no-cache "$BUILD_MAKEFILE" "$WEB_DIR"
  set +e

  echo 'Linking modules'
  rm -rf "$WEB_PATH/profiles/dosomething/modules/dosomething"
  ln -s "$BASE_PATH/modules/dosomething" "$WEB_PATH/profiles/dosomething/modules/dosomething"

  echo 'Linking themes'
  rm -rf "$WEB_PATH/profiles/dosomething/themes/dosomething/paraneue_dosomething"
  ln -s "$BASE_PATH/themes/dosomething/paraneue_dosomething" "$WEB_PATH/profiles/dosomething/themes/dosomething/paraneue_dosomething"

  # Clear caches and Run updates
  cd "$WEB_DIR"

  if [[ $1 == "--install" ]]
  then
    install
  fi

  if [[ $2 == "--dev" ]]
  then
    dev
  fi

  echo 'Replacing settings.php file...'
  rm -f $WEB_PATH/sites/default/settings.php && ln -s $BASE_PATH/settings.php $WEB_PATH/sites/default/settings.php

  echo 'Adding role to admin user...'
  drush user-add-role 'administrator' 1

  echo 'Updating database...'
  drush updb -y

  echo 'Clearing caches...'
  drush cc all

  if [ ! -e "~/.bash_profile" ]
  then
    echo 'Setting up PHP CodeSniffer...'
    echo 'alias codercs="phpcs --standard=$WEB_PATH/profiles/dosomething/modules/contrib/coder/coder_sniffer/Drupal/ruleset.xml --extensions=php,module,inc,install,test,profile,theme"' >> ~/.bash_profile
    source ~/.bash_profile
  fi

  echo 'Adding APC script at /apc.php...'
  ln -s /srv/salt/php5/apc.php $BASE_PATH/html/apc.php

  echo 'Build complete.'
}

#=== FUNCTION ==================================================================
# NAME: install
# DESCRIPTION: Installs project using dosomething profile
#===============================================================================
function install {
  echo 'Installing site...'
  drush site-install dosomething -y --db-url=mysql://root@localhost/dosomething --site-name=DoSomething

  echo 'Granting basic permissions...'
  drush rap 'anonymous user' 'access content'
  drush rap 'authenticated user' 'access content'

  # Without command below, view_unpublished module prompts you to 
  # The content access permissions need to be rebuilt. Rebuild permissions.
  # This does that.
  echo 'Rebuilding node permissions'
  drush php-eval 'node_access_rebuild();'

  # For whatever weird reason, not all user permissions are set properly afer install.
  # This fixes it.
  echo 'Reverting all features'
  drush -y fra
}

#=== FUNCTION ==================================================================
# NAME: devel
# DESCRIPTION: Enables modules, generates nodes.
#===============================================================================
function dev {
  echo 'Enabling modules'
  drush en devel devel_generate dosomething_fact_devel -y

  echo 'Auto-generating Content'
  drush php-eval "dosomething_fact_devel_create_facts();"
  drush genc 50 0 --types=image
  drush genc 50 0 --types=campaign

}

#=== FUNCTION ==================================================================
# NAME: deploy
# DESCRIPTION: Deploys project to Pantheon
#===============================================================================
function deploy {
  echo 'deploying'

  BASE_PATH=`pwd -P` # do this to play nice with CI

  if [ $BASE_PATH/$BUILD_DIR ]; then
    echo 'Wiping build directory...'
    rm -rf $BASE_PATH/$BUILD_DIR
  fi

  drush make --no-gitinfofile --no-cache "$BUILD_MAKEFILE" "$BUILD_DIR"

  ln -s $BASE_PATH/settings.php $BASE_PATH/$BUILD_DIR/sites/default/settings.php

  export ENV=dev
  export SITE=2b03733d-f60b-f4dd-67fb-9c518a66b3ca

  rsync -rlvz --size-only --ipv4 --progress -e 'ssh -p 2222' $BUILD_DIR/* $ENV.$SITE@appserver.$ENV.$SITE.drush.in:code/

  drush psite-commit $SITE $ENV --message="Deployment"

}


# ==============================================================================
# Commands
# ==============================================================================


#----------------------------------------------------------------------
# help
#----------------------------------------------------------------------
if [[ $1 == "--help" ]] || [[ $1 == "-h" ]] || [[ $1 == "" ]]
then
  help
fi

#----------------------------------------------------------------------
# build
#----------------------------------------------------------------------
if [[ $1 == "build" ]]
then
  if [[ $2 == "--install" ]] && [[ $3 == "--dev" ]]
  then
    build --install --dev
  elif [[ $2 == "--install" ]]
  then
    build --install
  else
    build
  fi
fi

#----------------------------------------------------------------------
# deploy
#----------------------------------------------------------------------
if [[ $1 == "deploy" ]]
then
  deploy
fi
