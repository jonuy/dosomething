<?php

/**
 * @file
 * Provides a custom field compound text.
 */

/**
 * Implements hook_field_info().
 */
function dosomething_compoundtext_field_info() {
  return array(
    'dosomething_compoundtext' => array(
      'label' => t('Compound Text'),
      'description' => t('Title & Body compound field.'),
      'default_widget' => 'dosomething_compoundtext',
      'default_formatter' => 'dosomething_compoundtext_default'
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function dosomething_compoundtext_field_widget_info() {
  return array(
    'dosomething_compoundtext' => array(
      'label' => t('Text field'),
      'field types' => array('dosomething_compoundtext'),
    ),
  );
}

/**
 * Implements hook_field_field_validate().
 */
function dosomething_compoundtext_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'text_max_length',
          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function dosomething_compoundtext_field_is_empty($item, $field) {
  if (empty($item['dosomething_compoundtext']['title']) && empty($item['dosomething_compoundtext']['body'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function dosomething_compoundtext_field_formatter_info() {
  return array(
    'dosomething_compoundtext_default' => array(
      'label' => t('Default'),
      'field types' => array('dosomething_compoundtext'),
    ),
  );
}

/**
 * Implements hook_field_presave().
 */
function dosomething_compoundtext_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    $items[$delta]['title'] = isset($item['dosomething_compoundtext']['title']) ? $item['dosomething_compoundtext']['title'] : '';
    $items[$delta]['body'] = isset($item['dosomething_compoundtext']['body']) ? $item['dosomething_compoundtext']['body'] : '';
  }
}

/**
 * Implements hook_field_widget_form().
 */
function dosomething_compoundtext_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {
    case 'dosomething_compoundtext' :
      $element['dosomething_compoundtext'] = array(
        '#type' => 'fieldset',
        '#title' => $element['#title'],
        '#tree' => TRUE,
      );
      $element['dosomething_compoundtext']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => isset($items[$delta]['title']) ? $items[$delta]['title']  : '',
        '#required' => FALSE,
        '#size' => 60,
        '#attributes' => array('maxlength' => 255),
      );
      $element['dosomething_compoundtext']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' =>  isset($items[$delta]['body']) ? $items[$delta]['body'] : '',
        '#required' => FALSE,
        '#attributes' => array('maxlength' => 2048),
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function dosomething_compoundtext_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'dosomething_compoundtext_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => '<h3>' . $item['title'] . ' </h3> <p> ' . $item['body'] . '<p>',
        );
      }
      break;
  }

  return $element;
}
