<?php
/**
 * @file
 * Code for the DoSomething Fact feature.
 */

include_once 'dosomething_fact.features.inc';
/**
 * @file
 * Provides a Fact custom entity.
 */

/**
 * Implements hook_entity_info().
 */
function dosomething_fact_entity_info() {
  $info = array();
  $info['fact'] = array(
    'label' => t('Fact'),
    'base table' => 'dosomething_fact',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'fact',
    ),
    'entity class' => 'FactEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'FactEntityController',
    'admin ui' => array(
      'path' => 'admin/fact',
      'controller class' => 'FactEntityUIController',
      'menu wildcard' => '%fact',
      'file' => 'dosomething_fact.admin.inc',
    ),
    'module' => 'dosomething_fact',
     // Controls who can access entity CRUD.
    'access callback' => 'dosomething_fact_access',
    'views controller class' => 'EntityDefaultViewsController',
  );
  return $info;
}


/**
 * Implements hook_entity_property_info().
 */
function dosomething_fact_entity_property_info() {
  $info = array();
  $properties = &$info['fact']['properties'];

  $properties['id'] = array(
    'label' => t('Fact ID'),
    'description' => t('The unique ID of the Fact,'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  $properties['fact'] = array(
    'label' => t('Fact'),
    'description' => t('The fact.'),
    'type' => 'text',
    'schema field' => 'fact',
  );
  $properties['source'] = array(
    'label' => t('Source'),
    'description' => t('The source the fact comes from.'),
    'type' => 'text',
    'schema field' => 'source',
  );
  $properties['changed'] = array(
    'label' => t('Updated Date'),
    'description' => t('Date the fact was updated.'),
    'type' => 'date',
    'schema field' => 'changed',
  );
  $properties['created'] = array(
    'label' => t('Created Date'),
    'description' => t('Date the fact was created.'),
    'type' => 'date',
    'schema field' => 'created',
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function dosomething_fact_menu() {
  $items = array();
  $items['fact/%fact'] = array(
    'title callback' => t('Fact'),
    'page callback' => 'dosomething_fact_view_entity',
    'page arguments' => array(1, 2),
    'access callback' => 'dosomething_fact_access',
    'access arguments' => array('view'),
  );
  // This menu callback needs to be visible by SecurePages in order for ctools modal to work.
  $items['admin/dosomething-fact/modal-add/%ctools_js'] = array(
    'page callback' => 'dosomething_fact_modal_add_callback',
    'page arguments' => array(3),
    'access callback' => 'dosomething_fact_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Determines whether the given user has access to a fact.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 *
 */
function dosomething_fact_access($op, $account = NULL) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }
  if ($op == 'update') {
    $perm = 'edit fact';
  }
  else {
    $perm = $op . ' fact';
  }
  if (user_access($perm, $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu autoloader for /fact.
 */
function fact_load($id) {
  $fact = entity_load('fact', array($id));
  return array_pop($fact);
}

/**
 * Implements hook_permission().
 */
function dosomething_fact_permission() {
  return array(
    'view fact' => array(
      'title' => t('View Facts'),
    ),
    'create fact' => array(
      'title' => t('Create Facts'),
    ),
    'edit fact' => array(
      'title' => t('Edit Facts'),
    ),
    'delete fact' => array(
      'title' => t('Delete Facts'),
    ),
  );
}

/**
 * Callback for /fact/ID page.
 */
function dosomething_fact_view_entity($fact, $view_mode = 'full') {
  return entity_view('fact', array($fact->id => $fact), $view_mode);
}

/**
 * Page callback for ctools add fact modal.
 *
 * @see dosomething_fact_menu().
 */
function dosomething_fact_modal_add_callback($ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add fact'),
    );
    $output = ctools_modal_form_wrapper('dosomething_fact_modal_add_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('dosomething_fact_modal_add_form');
  }
}

/**
 * Form constructor for add fact modal form.
 */
function dosomething_fact_modal_add_form($form, &$form_state) {
  // Use Fact Admin UI form:
  module_load_include('inc', 'dosomething_fact', 'dosomething_fact.admin');
  $form = fact_form($form, $form_state, NULL, 'add');
  return $form;
}

/**
 * Form submit handler for add fact modal form.
 */
function dosomething_fact_modal_add_form_submit(&$form, &$form_state) {
  // Create new Fact entity:
  $fact = entity_create('fact', array(
    'fact' => $form_state['values']['fact'],
    'source' => $form_state['values']['source'],
    'url_source' => $form_state['values']['url_source'],
    )
  );
  $fact->save();
  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  // Update fact status with confirmation message:
  $form_state['ajax_commands'][] = ajax_command_replace('#add-fact-status', '<div id="add-fact-status"><strong>' . t('New fact added:') . '</strong> ' . $form_state['values']['fact'] . '</div>');
}

/**
 * Returns array of values of a Fact entity.
 *
 * @param object $fact_wrapper
 *   A fact entity as returned by entity_metadata_wrapper.
 *
 * @return array
 *   Array of fact values.
 *
 */
function dosomething_fact_get_fact_wrapper_values($fact_wrapper) {
  return array(
    'fact' => $fact_wrapper->fact->value(),
    'source' => $fact_wrapper->source->value(),
  );
}
