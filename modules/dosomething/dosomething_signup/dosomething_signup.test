<?php
/**
 * @file
 * Tests for dosomething_signup.module.
 */

class DoSomethingSignupWebTestCase extends DrupalWebTestCase {
  // Required to test inside the DoSomething profile:
  protected $profile = 'dosomething';

  public static function getInfo() {
    return array(
      'name' => 'DoSomething Signup Web Tests',
      'description' => 'Web tests for dosomething_signup module.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp(array('dosomething_signup'));
  }

  /**
   * Query the dosomething_signup table for given $nid and $uid.
   */
  public function querySignup($nid, $uid) {
    $result = db_select('dosomething_signup', 's')
      ->condition('uid', $uid)
      ->condition('nid', $nid)
      ->fields('s', array('sid'))
      ->execute();
    $sid = $result->fetchField(0);
    // If a sid was found, return it.
    if ($sid) {
      return $sid;
    }
    // Otherwise return FALSE.
    return FALSE;
  }

  /**
   * Test for dosomething_signup_schema().
   */
  public function testSchema() {
    $tbl = 'dosomething_signup';
    $this->assertTrue(db_table_exists($tbl), $tbl . ' table exists.');
    $this->assertTrue(db_field_exists($tbl, 'sid'), 'sid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'uid'), 'uid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'nid'), 'nid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'timestamp'), 'timestamp field exists.');
    $this->assertTrue(db_index_exists($tbl, 'uid'), 'uid index exists.');
    $this->assertTrue(db_index_exists($tbl, 'uid-nid'), 'uid-nid index exists.');
  }

  /**
   * Test for dosomething_signup_insert().
   */
  public function testInsert() {
    $uid = 11;
    $nid = 711;
    $sid = dosomething_signup_insert($nid, $uid);
    // Test that numeric sid has been returned.
    $this->assertTrue(is_numeric($sid), "A numeric sid was returned on insert.");
    // Test that the record actually exists in the database.
    $query_sid = $this->querySignup($nid, $uid);
    $this->assertIdentical($query_sid, $sid, "Record exists in db.");
    // Test that can't insert a duplicate uid/nid record.
    $sid = dosomething_signup_insert($nid, $uid);
    $this->assertIdentical($sid, FALSE, "FALSE was returned on duplicate nid/uid insert.");
    // Test that global $user uid is inserted when no 2nd param.
    $sid = dosomething_signup_insert($nid);
    global $user;
    $query_sid = $this->querySignup($nid, $user->uid);
    $this->assertIdentical($query_sid, $sid, "Record inserted for global user uid.");
  }

}
