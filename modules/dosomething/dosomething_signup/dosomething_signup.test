<?php
/**
 * @file
 * Tests for dosomething_signup.module.
 */

class DoSomethingSignupWebTestCase extends DrupalWebTestCase {
  // Required to test inside the DoSomething profile:
  protected $profile = 'dosomething';

  public static function getInfo() {
    return array(
      'name' => 'DoSomething Signup Web Tests',
      'description' => 'Web tests for dosomething_signup module.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    global $user;
    parent::setUp(array('dosomething_signup'));
    $this->tbl_name = 'dosomething_signup';
    // Random uid to use for testing.
    $this->uid = mt_rand(2, 100);
    // If random test uid == user uid:
    if ($this->uid == $user->uid) {
      // Increment test uid so they won't be equal.
      // We'll need to test separate functions for global $uid and a given $uid.
      $this->uid++;
    }
    // Random nid to use for testing.
    $this->nid = mt_rand(1, 10000);
  }

  /**
   * Query the dosomething_signup table for given $nid and $uid.
   */
  public function querySignup($nid, $uid) {
    $result = db_select($this->tbl_name, 's')
      ->condition('uid', $uid)
      ->condition('nid', $nid)
      ->fields('s', array('sid'))
      ->execute();
    $sid = $result->fetchField(0);
    // If a sid was found, return it.
    if ($sid) {
      return $sid;
    }
    // Otherwise return FALSE.
    return FALSE;
  }

  /**
   * Insert a dosomething_signup record for given $nid and $uid.
   */
  public function insertSignup($nid, $uid) {
    $sid = db_insert($this->tbl_name)
        ->fields(array(
          'uid' => $uid,
          'nid' => $nid,
          'timestamp' => REQUEST_TIME,
        )
      )
      ->execute();
    return $sid;
  }

  /**
   * Test for dosomething_signup_schema().
   */
  public function testSchema() {
    $tbl = $this->tbl_name;
    $this->assertTrue(db_table_exists($tbl), $tbl . ' table exists.');
    $this->assertTrue(db_field_exists($tbl, 'sid'), 'sid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'uid'), 'uid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'nid'), 'nid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'timestamp'), 'timestamp field exists.');
    $this->assertTrue(db_index_exists($tbl, 'uid'), 'uid index exists.');
    $this->assertTrue(db_index_exists($tbl, 'uid-nid'), 'uid-nid index exists.');
  }

  /**
   * Test for dosomething_signup_insert().
   */
  public function testInsert() {
    $uid = $this->uid;
    $nid = $this->nid;
    $sid = dosomething_signup_insert($nid, $uid);
    // Test that numeric sid has been returned.
    $this->assertTrue(is_numeric($sid), "A numeric sid was returned on insert.");
    // Test that the record actually exists in the database.
    $query_sid = $this->querySignup($nid, $uid);
    $this->assertIdentical($query_sid, $sid, "Record exists in db.");
    // Test that can't insert a duplicate uid/nid record.
    $sid = dosomething_signup_insert($nid, $uid);
    $this->assertIdentical($sid, FALSE, "FALSE was returned on duplicate nid/uid insert.");
    // Test that global $user uid is inserted when no 2nd param.
    $sid = dosomething_signup_insert($nid);
    global $user;
    $query_sid = $this->querySignup($nid, $user->uid);
    $this->assertIdentical($query_sid, $sid, "Record inserted for global user uid.");
  }

  /**
   * Test for dosomething_signup_delete().
   */
  public function testDelete() {
    // Truncate table to test clean.
    db_truncate($this->tbl_name);
    // Insert signup to be deleted.
    $sid1 = $this->insertSignup($this->nid, $this->uid);
    $this->assertTrue(is_numeric($sid1), "Signup record 1 inserted.");
    // Insert a second signup that won't be deleted.
    $sid2 = $this->insertSignup($this->nid, $this->uid + 1);
    $this->assertTrue(is_numeric($sid2), "Signup record 2 inserted.");
    // Delete signup record 1.
    dosomething_signup_delete($this->nid, $this->uid);
    // Query for signup record we just deleted.
    $sid = $this->querySignup($this->nid, $this->uid);
    $this->assertIdentical($sid, FALSE, "Signup record 1 deleted.");
    // Make sure the 2nd signup still exists.
    $test_sid = $this->querySignup($this->nid, $this->uid + 1);
    $this->assertIdentical($sid2, $test_sid, "Signup record 2 still exists.");
    // Test for global $user.
    global $user;
    // Insert signup for global $user->uid.
    $sid3 = $this->insertSignup($this->nid, $user->uid);
    $this->assertTrue(is_numeric($sid3), "Signup record for global user inserted.");
    // Excluding 2nd param should delete record for global $user->uid.
    dosomething_signup_delete($this->nid);
    // Query for global $user->uid's signup record.
    $sid = $this->querySignup($this->nid, $user->uid);
    // Test that has been deleted.
    $this->assertIdentical($sid, FALSE, "Signup record for global user deleted.");
    // Test that the record for $test_id still exists.
    $this->assertIdentical($sid2, $test_sid, "Signup record 2 still exists.");
  }
}
