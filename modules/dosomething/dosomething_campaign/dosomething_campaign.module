<?php
/**
 * @file
 * Provides a Campaign custom entity type named 'campaign'.
 */

/**
 * Implements hook_entity_info().
 */
function dosomething_campaign_entity_info() {
  $info = array();
  $info['campaign'] = array(
    'label' => t('Campaign'),
    'base table' => 'dosomething_campaign',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
    ),
    'entity class' => 'CampaignEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'CampaignEntityController',
    'admin ui' => array(
       'path' => 'admin/campaign',
       'controller class' => 'CampaignEntityUIController',
       'menu wildcard' => '%campaign',
       'file' => 'dosomething_campaign.admin.inc',
     ),
     'module' => 'dosomething_campaign',
     // Controls who can access entity CRUD.
     'access callback' => 'dosomething_campaign_access',
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {
  $items = array();
  $items['campaign/%campaign'] = array(
    'title' => 'Campaign',
    'page callback' => 'dosomething_campaign_view_entity',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Access callback for CampaignEntity CRUD operations.
 */
function dosomething_campaign_access($op, $dosomething_campaign = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Menu autoloader for /campaign.
 */
function campaign_load($id) {
  $campaign = entity_load('campaign', array($id));
  return array_pop($campaign);
}

/**
 * Callback for /campaign/ID page.
 *
 * Just a place to render a complete campaign entity.
 */
function dosomething_campaign_view_entity($campaign) {
  $campaign_entity = entity_view('campaign', array($campaign->id => $campaign));
  //@todo: Make me pretty.
  return print_r($campaign_entity, TRUE);
}

/**
 * Our custom entity class.
 */
class CampaignEntity extends Entity {
  /**
   * Override this in order to implement a custom default URI.
   */
  protected function defaultUri() {
    return array('path' => 'campaign/' . $this->identifier());
  }
}

/**
 * Our custom controller for the dosomething_campaign type.
 *
 * We're choosing to extend the controller provided by the entity module so that we'll have
 * full CRUD support for CampaignEntities.
 */
class CampaignEntityController extends EntityAPIController {

  /**
   * Overrides save() method.
   *
   * Populates created, updated, and uid automatically.
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {
    $current_timestamp = REQUEST_TIME;
    if (isset($entity->is_new)) {
      $entity->created = $current_timestamp;
      global $user;
      $entity->uid = $user->uid;
    }
    $entity->changed = $current_timestamp;
    return parent::save($entity, $transaction);
  }
}

/**
 * Our custom controller for the admin ui.
 */
class CampaignEntityUIController extends EntityDefaultUIController {

  /**
   * Generates the render array for a overview table for arbitrary entities
   * matching the given conditions.
   *
   * @param $conditions
   *   An array of conditions as needed by entity_load().

   * @return Array
   *   A renderable array.
   */
  public function overviewTable($conditions = array()) {

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $this->entityType);
    $query->propertyOrderBy('changed', 'DESC');

    // Add all conditions to query.
    foreach ($conditions as $key => $value) {
      $query->propertyCondition($key, $value);
    }

    if ($this->overviewPagerLimit) {
      $query->pager($this->overviewPagerLimit);
    }

    $results = $query->execute();

    $ids = isset($results[$this->entityType]) ? array_keys($results[$this->entityType]) : array();
    $entities = $ids ? entity_load($this->entityType, $ids) : array();

    $rows = array();
    foreach ($entities as $entity) {
      // Add additional columns for table rows:
      $rows[] = $this->overviewTableRow($conditions, entity_id($this->entityType, $entity), $entity, array(
        format_date($entity->changed, 'short'),
        )
      );
    }

    $render = array(
      '#theme' => 'table',
      // Add additional columns for table header:
      '#header' => $this->overviewTableHeaders($conditions, $rows, array(t('Updated'))),
      '#rows' => $rows,
      '#empty' => t('None.'),
    );
    return $render;
  }

  /**
   * Generates the table headers for the overview table.
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('Title'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }
}
