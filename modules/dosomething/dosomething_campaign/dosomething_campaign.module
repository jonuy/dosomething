<?php
/**
 * @file
 * Provides a Campaign custom entity type named 'campaign'.
 */
define('DOSOMETHING_CAMPAIGN_FORM_DESC_PREFIX', 'dosomething_campaign_form_desc_');
/**
 * Implements hook_entity_info().
 */
function dosomething_campaign_entity_info() {
  $info = array();
  $info['campaign'] = array(
    'label' => t('Campaign'),
    'base table' => 'dosomething_campaign',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
    ),
    'entity class' => 'CampaignEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'CampaignEntityController',
    'admin ui' => array(
      'path' => 'admin/campaign',
      'controller class' => 'CampaignEntityUIController',
      'menu wildcard' => '%campaign',
      'file' => 'dosomething_campaign.admin.inc',
    ),
    'module' => 'dosomething_campaign',
     // Controls who can access entity CRUD.
    'access callback' => 'dosomething_campaign_access',
    // Inform Field API that we can add Fields to this entity.
    'fieldable' => TRUE,
    'bundles' => array(
      'campaign' => array(
        'label' => t('Campaign'),
        'admin' => array(
          'path' => 'admin/campaign',
          'access arguments' => array(1),
        ),
      ),
    ),
    // Custom view modes.
    'view modes' => array(
      'pitch' => array(
        'label' => t('Pitch'),
        'custom settings' => FALSE,
      ),
      'action' => array(
        'label' => t('Action'),
        'custom settings' => FALSE,
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {
  $items = array();
  $items['campaign/%campaign'] = array(
    'title callback' => 'dosomething_campaign_page_title',
    'title arguments' => array(1),
    'page callback' => 'dosomething_campaign_view_entity',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );
  $items['admin/config/dosomething/dosomething_campaign'] = array(
    'title' => 'DoSomething Campaign Settings',
    'description' => t('Configure DoSomething Campaign settings.'),
    'access arguments' => array('administer modules'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_campaign_admin_settings_form'),
    'file' => 'dosomething_campaign.admin.inc',
  );
  return $items;
}
/**
 * Implements hook_permission().
 */
function dosomething_campaign_permission() {
  return array(
    'administer campaign' => array(
      'title' => t('Administer Campaign Content'),
      ),
    'create campaign' => array(
      'title' => t('Create Campaigns'),
      ),
    'edit campaign' => array(
      'title' => t('Edit Campaigns'),
      ),
    'delete campaign' => array(
      'title' => t('Delete Campaigns'),
      ),
    'view unpublished campaign' => array(
      'title' => t('View Unpublished Campaigns'),
      ),
  );
}


/**
 * Title callback: Returns the title of the campaign.
 *
 * @param $node
 *   The node object.
 *
 * @return
 *   An unsanitized string that is the title of the campaign.
 *
 * @see dosomething_campaign_menu()
 */
function dosomething_campaign_page_title($campaign) {
  return $campaign->title;
}

/**
 * Access callback for CampaignEntity CRUD operations.
 */
function dosomething_campaign_access($op, $dosomething_campaign = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Menu autoloader for /campaign.
 */
function campaign_load($id) {
  $campaign = entity_load('campaign', array($id));
  return array_pop($campaign);
}

/**
 * Callback for /campaign/ID page.
 *
 * Passing view_mode as an argument is temporary until signups are functional.
 */
function dosomething_campaign_view_entity($campaign, $view_mode = 'action') {
  return entity_view('campaign', array($campaign->id => $campaign), $view_mode);
}

/**
 * Form constructor for the Campaign Signup form.
 */
function dosomething_campaign_signup_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Do This'),
  );
  return $form;
}

/**
 * Process variables for entity.tpl.php.
 *
 * @see template_preprocess_entity in Entity API module.
 */
function dosomething_campaign_preprocess_entity(&$variables) {
  $entity_type = $variables['elements']['#entity_type'];
  // Enables ENTITY--VIEW_MODE.tpl.php naming suggestion.
  $variables['theme_hook_suggestions'][] = $entity_type . '__' . $variables['view_mode'];
  // If this is a campaign entity, create variables to simplify theming.
  if ($entity_type == 'campaign') {
    // Store the campaign entity to quickly reference its properties within the tpl:
    $variables['campaign'] = $variables['elements']['#entity'];
    $campaign = entity_metadata_wrapper('campaign', $variables['elements']['#entity']);
    // Cover image vars.
    $cover_image = $campaign->field_image_campaign_cover->value();
    $variables['cover_image']['src'] = file_create_url($cover_image['uri']);
    $variables['cover_image']['alt'] = $cover_image['alt'];
    // Gallery image vars.
    $variables['gallery'] = array();
    foreach ($campaign->field_image_campaign_gallery->value() as $gallery_image) {
      $variables['gallery'][] = array(
        'src' => file_create_url($gallery_image['uri']),
        'alt' => $gallery_image['alt'],
      );
    }
  }
}
