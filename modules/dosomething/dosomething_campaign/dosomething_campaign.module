<?php
/**
 * @file
 * Code for the dosomething_campaign feature.
 */

include_once 'dosomething_campaign.features.inc';

/**
 * Implements hook_form_alter().
 */
function dosomething_campaign_form_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();
  // Link for the ctools modal page to render.
  $add_fact_link = 'admin/dosomething-fact/modal-add/nojs';

  $add_link_div = '<div id="add-fact-status"></div><div>' . l(t('Add new fact'), $add_fact_link, array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';

  $form['field_fact_problem']['#prefix'] = $add_link_div;
  unset($form['field_active_hours'][LANGUAGE_NONE]['#options']['_none']);
}

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {
  $items = array();

  // node/nid/pitch
  $items['node/%node/pitch'] = array(
    'title' => 'Pitch',
    'page callback' => '_dosomething_campaign_pitch_view_mode',
    'page arguments' => array(1),
    'access callback' => '_dosomething_campaign_pitch_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
 * Determines whether a user has access to the pitch page.
 */
function _dosomething_campaign_pitch_page_access($node) {
  // Are we on a campaign node?
  if ($node->type == 'campaign') {
    // Is the user a DS admin or editor?
    if (dosomething_user_is_staff()) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Campaign pitch page callback from hook_menu().
 */
function _dosomething_campaign_pitch_view_mode($node) {
  $node_rendered = node_view($node, 'pitch');
  return $node_rendered;
}

/**
 * Implements hook_entity_info_alter().
 */
function dosomething_campaign_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['pitch'] = array(
    'label' => t('Pitch page'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function dosomething_campaign_preprocess_node(&$vars) {
  if ($vars['type'] != 'campaign') { return; }
  if ($vars['view_mode'] == 'pitch') {
    // Use the pitch page template to theme.
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__pitch';

    // Gather vars for pitch page.
    dosomething_campaign_preprocess_pitch_page($vars);
  }
  elseif ($vars['view_mode'] == 'full'){
    // Output entity_metadata_wrapper for easier theming..
    $campaign = entity_metadata_wrapper('node', menu_get_object());
    $vars['campaign'] = $campaign;
    // Collect all field_collection field values for easier theming.
    $field_collections = array('faq', 'step_pre', 'step_post');
    foreach ($field_collections as $fc) {
      $vars[$fc] = dosomething_campaign_get_field_collection_values($campaign, 'field_' . $fc);
    }
  }
}

/**
 * Preprocess pitch page vars.
 */
function dosomething_campaign_preprocess_pitch_page(&$vars) {
  // Prepare vars for pitch page.
  $vars['signup_form'] = drupal_get_form('dosomething_signup_form', $vars['nid']);
}

/**
 * Returns array of values of a field collection field.
 *
 * @param object $wrapper
 *   An entity_metadata_wrapper object.
 * @param string $field_name
 *   The field_collection field to return values from.
 *
 * @return array
 *   Multi-dimensional array of field collection values.
 *
 */
function dosomething_campaign_get_field_collection_values($wrapper, $field_name) {
  $values = array();
  // Loop through the given field.
  foreach ($wrapper->{$field_name}->getIterator() as $delta => $field) {
    // Copy is returned as an array.
    $copy = $field->field_compound_text_copy->value();
    $values[] = array(
      'header' => $field->field_compound_text_header->value(),
      'copy' => $copy['safe_value'],
    );
  }
  return $values;
}