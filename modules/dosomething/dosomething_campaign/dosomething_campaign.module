<?php
/**
 * @file
 * Code for the dosomething_campaign feature.
 */

include_once 'dosomething_campaign.features.inc';

/**
 * Implements hook_form_alter().
 */
function dosomething_campaign_form_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();
  // Link for the ctools modal page to render.
  $add_fact_link = 'admin/dosomething-fact/modal-add/nojs';

  $add_link_div = '<div id="add-fact-status"></div><div>' . l(t('Add new fact'), $add_fact_link, array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';

  $form['field_fact_problem']['#prefix'] = $add_link_div;
  unset($form['field_active_hours'][LANGUAGE_NONE]['#options']['_none']);
}

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {
  $items = array();

  // node/nid/pitch
  $items['node/%node/pitch'] = array(
    'title' => 'Pitch',
    'page callback' => '_dosomething_campaign_pitch_view_mode',
    'page arguments' => array(1),
    'access callback' => '_dosomething_campaign_pitch_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
 * Determines whether a user has access to the pitch page.
 */
function _dosomething_campaign_pitch_page_access($node) {
  // Are we on a campaign node?
  if ($node->type == 'campaign') {
    // Is the user a DS admin or editor?
    if (dosomething_user_is_staff()) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Campaign pitch page callback from hook_menu().
 */
function _dosomething_campaign_pitch_view_mode($node) {
  $node_rendered = node_view($node, 'pitch');
  return $node_rendered;
}

/**
 * Implements hook_entity_info_alter().
 */
function dosomething_campaign_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['pitch'] = array(
    'label' => t('Pitch page'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function dosomething_campaign_preprocess_node(&$vars) {
  if ($vars['type'] != 'campaign') { return; }

  // Are we on a the action/pitch page?
  if ($vars['view_mode'] == 'pitch' || $vars['view_mode'] == 'full') {

    $node = menu_get_object();
    $wrapper = entity_metadata_wrapper('node', $node);

    // Vars needed for both the pitch & action page.
    $vars['cta'] = $wrapper->field_call_to_action->value();

    if ($vars['view_mode'] == 'pitch') {
      // Use the pitch page template to theme.
      $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__pitch';

      // Gather vars for pitch page.
      dosomething_campaign_preprocess_pitch_page($vars, $wrapper);
    }
    elseif ($vars['view_mode'] == 'full'){
      // Gather the vars for the action page.
      dosomething_campagin_preprocess_action_page($vars, $wrapper);
      // Output reportback form:
      $vars['reportback_form'] = drupal_get_form('dosomething_reportback_form', $wrapper);
    }
  }
}

/**
 * Preprocesses variables for a campaign action page.
 *
 * @param array $vars
 *   Node variables, passed from preprocess_node.
 * @param object $wrapper
 *   The corresponding entity wrapper for the node in $vars.
 */
function dosomething_campagin_preprocess_action_page(&$vars, &$wrapper) {
  // Know.
  // Single value variables:
  $vars['solution_support'] = $wrapper->field_solution_support->value();

  // Collect fact values for tpl variables.
  $fact_problem = $wrapper->field_fact_problem->value();
  if (isset($fact_problem)) {
    $vars['fact_problem'] = dosomething_fact_get_fact_wrapper_values($wrapper->field_fact_problem);
  }
  $fact_solution = $wrapper->field_fact_solution->value();
  if (isset($fact_solution)) {
    $vars['fact_solution'] = dosomething_fact_get_fact_wrapper_values($wrapper->field_fact_solution);
  }

  $more_facts = $wrapper->field_facts->value();
  if (isset($more_facts)) {
    $vars['more_facts'] = dosomething_fact_get_fact_field_wrapper_values($wrapper->field_facts);
  }

  // Collect all field_collection field values for easier theming.
  $field_collections = array('faq', 'step_pre', 'step_post');
  foreach ($field_collections as $fc) {
    $vars[$fc] = dosomething_campaign_get_field_collection_values($wrapper, 'field_' . $fc);
  }

  $psa = $wrapper->field_psa->value();
  if (isset($psa)) {
    $vars['psa'] = '<iframe id="ytplayer" type="text/html" width="640" height="390"
     src="http://youtube.com/embed/' . $psa . '"' . '"frameborder="0"/>';
  }
  else {
    // @TODO: real image logic
    $vars['psa'] = $vars['field_image_psa_replacement'][0]['entity']->field_image_square[LANGUAGE_NONE][0]['uri'];
  }

  // Plan.
  $vars['starter'] = $wrapper->field_starter_statement->value();
  $vars['time'] = $wrapper->field_time_and_place->value();
  $vars['vips'] = $wrapper->field_vips->value();
  $vars['hype'] = $wrapper->field_promoting_tips->value();
  $vars['items_needed'] = $wrapper->field_items_needed->value();

  // Do.
  $vars['pre_step_header'] = $wrapper->field_pre_step_header->value();
  $vars['pre_step_copy'] = $wrapper->field_pre_step_copy->value();
  $vars['pic_step'] = $wrapper->field_photo_step->value();
  $vars['post_step_header'] = $wrapper->field_post_step_header->value();
  $vars['post_step_copy'] = $wrapper->field_post_step_copy->value();

  // Prove.
  $vars['reportback_copy'] = $wrapper->field_report_back_copy->value();

  // Collect all field_collection field values for easier theming.
  $field_collections = array('faq', 'step_pre', 'step_post');
  foreach ($field_collections as $fc) {
    $vars[$fc] = dosomething_campaign_get_field_collection_values($wrapper, 'field_' . $fc);
  }
}

/**
 * Preprocesses variables for a campaign pitch page.
 *
 * @param array $vars
 *   Node variables, passed from preprocess_node.
 * @param object $wrapper
 *   The corresponding entity wrapper for the node in $vars.
 */
function dosomething_campaign_preprocess_pitch_page(&$vars, &$wrapper) {
  $vars['scholarship'] = '$' . $wrapper->field_scholarship_amount->value() . ' Scholarship';
  $vars['signup_form'] = drupal_get_form('dosomething_signup_form', $vars['nid']);
}

/**
 * Returns array of values of a field collection field.
 *
 * @param object $wrapper
 *   An entity_metadata_wrapper object.
 * @param string $field_name
 *   The field_collection field to return values from.
 *
 * @return array
 *   Multi-dimensional array of field collection values.
 *
 */
function dosomething_campaign_get_field_collection_values($wrapper, $field_name) {
  $values = array();
  // Loop through the given field.
  foreach ($wrapper->{$field_name}->getIterator() as $delta => $field) {
    // Copy is returned as an array.
    $copy = $field->field_compound_text_copy->value();
    $values[] = array(
      'header' => $field->field_compound_text_header->value(),
      'copy' => $copy['safe_value'],
    );
  }
  return $values;
}