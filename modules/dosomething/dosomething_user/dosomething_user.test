<?php

/**
 * @file
 * Tests for the dosomething_user module.
 */

/**
 * Base class for all dosomething_user unit test cases.
 */
class DosomethingUserUnitTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'DoSomething User Unit Tests',
      'description' => 'Unit tests for DoSomething User',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp();
  }

  public function testValidCell() {
    $good = '718-224-9982';
    $country = '1-718-224-9982';
    $stuff = '1 (718) 224.9982';
    $plus = '+1 (718) 224-9982';
    $bad = '718-555-2234';
    $too_short = '718-224';
    $even_worse = 'abcdefg';
    $bad_punctuation = '718#224_9982';
    $bad_numbers = '718 #12 99-6';
    $consecutive_numbers = '999-999-9999';

    $this->assertTrue(dosomething_user_valid_cell($good));
    $this->assertTrue(dosomething_user_valid_cell($country));
    $this->assertTrue(dosomething_user_valid_cell($stuff));
    $this->assertTrue(dosomething_user_valid_cell($plus));
    $this->assertFalse(dosomething_user_valid_cell($bad));
    $this->assertFalse(dosomething_user_valid_cell($too_short));
    $this->assertFalse(dosomething_user_valid_cell($even_worse));
    $this->assertFalse(dosomething_user_valid_cell($bad_punctuation));
    $this->assertFalse(dosomething_user_valid_cell($bad_numbers));
    $this->assertFalse(dosomething_user_valid_cell($consecutive_numbers));
  }
}


/**
 * Base class for all dosomething_user web test cases.
 */
class DosomethingUserWebTestCase extends DrupalWebTestCase {
  // Required to test inside the DoSomething profile:
  protected $profile = 'dosomething';

  public static function getInfo() {
    return array(
      'name' => 'DoSomething User Web Test',
      'description' => 'Web tests for DoSomething User',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    parent::setUp(array('dosomething_user'));
    $this->administrator_perms = array(
      'access administration menu',
      'access administration pages',
      'access all views',
      'access content overview',
      'access site in maintenance mode',
      'access site reports',
      'administer actions',
      'administer blocks',
      'administer content types',
      'administer features',
      'administer filters',
      'administer image styles',
      'administer mailsystem',
      'administer module filter',
      'administer modules',
      'administer nodes',
      'administer pathauto',
      'administer permissions',
      'administer site configuration',
      'administer software updates',
      'administer taxonomy',
      'administer themes',
      'administer unit tests',
      'administer url aliases',
      'administer users',
      'administer views',
      'block IP addresses',
      'bypass node access',
      'create url aliases',
      'flush caches',
      'generate features',
      'manage features',
      'view the administration theme',
    );
    $this->editor_perms = array(
      'access administration menu',
      'access administration pages',
      'access content overview',
      'revert revisions',
      'view any unpublished content',
      'view own unpublished content',
      'view revisions',
      'view the administration theme',
    );
    $this->authenticated_perms = array(
      'access content',
    );
  }

  /**
   * Wrapper function to test user_access().
   *
   * Executes assertFalse and assertTrue tests based on boolean $granted value.
   *
   * @param string $permission
   *   The permission to check for, e.g. "administer nodes".
   * @param object $user
   *   The loaded user to check permissions of.
   * @param bool $granted
   *   If $granted == FALSE, test that permission is denied for given $user.
   *   Else test that the permission us grabted for the given $user.
   */
  public function subTestUserAccess($permission, $user, $granted = TRUE) {
    $has_access = user_access($permission, $user);
    if ($granted === FALSE) {
      $this->assertFalse($has_access, 'User ' . $user->uid . ' does not have access to ' . $permission . '.');
    }
    else {
      $this->assertTrue($has_access, 'User ' . $user->uid . ' has access to ' . $permission . '.');
    }
  }

  /**
   * Creates and returns a user with "administrator" role.
   *
   * Because drupalCreateUser will actually just create a new role based
   * on the permissions you pass it, that doesn't help us here, since we're
   * testing the actual roles defined by dosomething_user.
   *
   * We need to create an actual user in the users table to test the role.
   *
   * @return object
   *   A newly created user object with the "authenticated user" and given role.
   */
  public function createUserByRoleName($role_name) {
    $role = user_role_load_by_name($role_name);
    $timestamp = time();
    $fields = array(
      'name' => $role_name . ' ' . $timestamp,
      'mail' => $role_name . ' ' . $timestamp . '@example.com',
      'pass' => 'password',
      'status' => 1,
      'init' => 'email address',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        $role->rid => $role_name,
      ),
    );
    // First param is blank so a new user is created:
    $user = user_save('', $fields);
    $this->assertTrue(is_numeric($user->uid), $role_name . " user uid " . $user->uid . " is numeric.");
    $this->assertTrue(in_array($role_name, $user->roles), $role_name . " user uid " . $user->uid . " has '" . $role_name . "' role.");
    return $user;
  }

  /**
   * Test that an administrator has all the expected admin permissions.
   */
  public function testAdministratorPerms() {
    // Create an administrator user:
    $admin = $this->createUserByRoleName('administrator');
    // Loop through admin perms and test that $admin user has them granted.
    foreach ($this->administrator_perms as $perm) {
      $this->subTestUserAccess($perm, $admin);
    }
  }

  /**
   * Test that an editor has all the expected editor permissions.
   */
  public function testEditorPerms() {
    // Create an editor user:
    $editor = $this->createUserByRoleName('editor');
    // Loop through editor perms and test that $editor user has them granted.
    foreach ($this->editor_perms as $perm) {
      $this->subTestUserAccess($perm, $editor);
    }
    // Find the administrator permissions an editor should not have.
    $admin_only = array_diff($this->administrator_perms, $this->editor_perms);
    foreach ($admin_only as $perm) {
      $this->subTestUserAccess($perm, $editor, FALSE);
    }
  }

  /**
   * Test that an authenticated user has none of the expected admin permissions.
   */
  public function testAuthUserAdminPerms() {
    // Create an authenticated user:
    $auth = $this->drupalCreateUser();
    // Loop through authenticated perms and test that $auth user has them.
    foreach ($this->authenticated_perms as $perm) {
      $this->subTestUserAccess($perm, $auth);
    }
    // Loop through admin perms and test that $auth user does not have them.
    foreach ($this->administrator_perms as $perm) {
      $this->subTestUserAccess($perm, $auth, FALSE);
    }
    // Loop through editor perms and test that $auth user does not have them.
    foreach ($this->editor_perms as $perm) {
      $this->subTestUserAccess($perm, $auth, FALSE);
    }
  }

  /**
   * @see dosomething_user_is_staff().
   */
  public function testIsStaff() {
    $good_users = array(
      'editor' => $this->createUserByRoleName('editor'),
      'admin' => $this->createUserByRoleName('administrator'),
    );
    $bad_users = array(
      'auth' => $this->createUserByRoleName('authenticated user'),
      'rando' => $this->createUserByRoleName('anonymous user'),
    );
    foreach ($good_users as $user) {
      $this->assertTrue(dosomething_user_is_staff($user));
    }
    foreach ($bad_users as $user) {
      $this->assertFalse(dosomething_user_is_staff($user));
    }
  }
}
