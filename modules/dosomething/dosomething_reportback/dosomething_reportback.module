<?php
/**
 * @file
 * Provides Reportback functionality.
 */

/**
 * Implements hook_entity_info().
 */
function dosomething_reportback_entity_info() {
  $info = array();
  $info['reportback'] = array(
    'label' => t('Reportback'),
    'base table' => 'dosomething_reportback',
    'entity keys' => array(
      'id' => 'rbid',
      'label' => 'rbid',
    ),
    'entity class' => 'ReportbackEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ReportbackEntityController',
    'admin ui' => array(
      'path' => 'admin/reportback',
      'controller class' => 'ReportbackEntityUIController',
      'menu wildcard' => '%reportback',
      'file' => 'dosomething_reportback.admin.inc',
    ),
    'module' => 'dosomething_reportback',
     // Controls who can access entity CRUD.
    'access callback' => 'dosomething_reportback_access',
    'fieldable' => TRUE,
    'bundles' => array(
      'reportback' => array(
        'label' => t('Reportback'),
        'admin' => array(
          'path' => 'admin/reportback',
          'access arguments' => array('administer modules'),
        )
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function dosomething_reportback_menu() {
  $items = array();
  $items['reportback/%reportback'] = array(
    'title callback' => t('Reportback'),
    'page callback' => 'dosomething_reportback_view_entity',
    'page arguments' => array(1, 2),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('view'),
  );
  return $items;
}

/**
 * Menu autoloader for /reportback.
 */
function reportback_load($id) {
  $reportback = entity_load('reportback', array($id));
  return array_pop($reportback);
}

/**
 * Callback for /fact/ID page.
 */
function dosomething_reportback_view_entity($reportback, $view_mode = 'full') {
  return entity_view('reportback', array($reportback->rbid => $reportback), $view_mode);
}

/**
 * Determines whether the given user has access to a Reportback.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 *
 */
function dosomething_reportback_access($op, $account = NULL) {
  //@todo: Actually write real code here.
  return TRUE;
}

/**
 * Form constructor for a node reportback form.
 *
 * @param object $wrapper
 *   An entity_metadata_wrapper of the node to report back for.
 *
 * @ingroup forms
 */
function dosomething_reportback_form($form, &$form_state, $wrapper) {
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $wrapper->nid->value(),
  );
  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t("How many @noun did you @verb?", array(
        '@noun' => $wrapper->field_report_back_noun->value(),
        '@verb' => $wrapper->field_report_back_verb->value(),
      )
    ),
  );
  // Attach all reportback entity fields to the form:
  $reportback = entity_create('reportback', array());
  field_attach_form('reportback', $reportback, $form, $form_state);
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );
  return $form;
}

/**
 * Submit callback for dosomething_reportback_form().
 */
function dosomething_reportback_form_submit($form, &$form_state) {
  global $user;
  $entity = entity_create('reportback', array(
    'nid' => $form_state['values']['nid'],
  ));
  // Attach field data from the form:
  field_attach_submit('reportback', $entity, $form, $form_state); 
  // Save entity. 
  entity_save('reportback', $entity);
}
